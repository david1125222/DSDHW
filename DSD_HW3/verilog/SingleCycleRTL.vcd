$date
    May 10, 2018  00:21:51
$end
$version
    TOOL:	ncsim	15.20-s039
$end
$timescale
    10 ps
$end

$scope module SingleCycle_tb $end
$var reg       1 !    clk  $end
$var reg       1 "    rst_n  $end
$var wire     32 #    IR_addr [31:0] $end
$var wire     32 $    IR [31:0] $end
$var wire     32 %    RF_writedata [31:0] $end
$var wire      1 &    ReadDataMem [31] $end
$var wire      1 '    ReadDataMem [30] $end
$var wire      1 (    ReadDataMem [29] $end
$var wire      1 )    ReadDataMem [28] $end
$var wire      1 *    ReadDataMem [27] $end
$var wire      1 +    ReadDataMem [26] $end
$var wire      1 ,    ReadDataMem [25] $end
$var wire      1 -    ReadDataMem [24] $end
$var wire      1 .    ReadDataMem [23] $end
$var wire      1 /    ReadDataMem [22] $end
$var wire      1 0    ReadDataMem [21] $end
$var wire      1 1    ReadDataMem [20] $end
$var wire      1 2    ReadDataMem [19] $end
$var wire      1 3    ReadDataMem [18] $end
$var wire      1 4    ReadDataMem [17] $end
$var wire      1 5    ReadDataMem [16] $end
$var wire      1 6    ReadDataMem [15] $end
$var wire      1 7    ReadDataMem [14] $end
$var wire      1 8    ReadDataMem [13] $end
$var wire      1 9    ReadDataMem [12] $end
$var wire      1 :    ReadDataMem [11] $end
$var wire      1 ;    ReadDataMem [10] $end
$var wire      1 <    ReadDataMem [9] $end
$var wire      1 =    ReadDataMem [8] $end
$var wire      1 >    ReadDataMem [7] $end
$var wire      1 ?    ReadDataMem [6] $end
$var wire      1 @    ReadDataMem [5] $end
$var wire      1 A    ReadDataMem [4] $end
$var wire      1 B    ReadDataMem [3] $end
$var wire      1 C    ReadDataMem [2] $end
$var wire      1 D    ReadDataMem [1] $end
$var wire      1 E    ReadDataMem [0] $end
$var wire      1 F    CEN  $end
$var wire      1 G    WEN  $end
$var wire      1 H    A [6] $end
$var wire      1 I    A [5] $end
$var wire      1 J    A [4] $end
$var wire      1 K    A [3] $end
$var wire      1 L    A [2] $end
$var wire      1 M    A [1] $end
$var wire      1 N    A [0] $end
$var wire      1 O    ReadData2 [31] $end
$var wire      1 P    ReadData2 [30] $end
$var wire      1 Q    ReadData2 [29] $end
$var wire      1 R    ReadData2 [28] $end
$var wire      1 S    ReadData2 [27] $end
$var wire      1 T    ReadData2 [26] $end
$var wire      1 U    ReadData2 [25] $end
$var wire      1 V    ReadData2 [24] $end
$var wire      1 W    ReadData2 [23] $end
$var wire      1 X    ReadData2 [22] $end
$var wire      1 Y    ReadData2 [21] $end
$var wire      1 Z    ReadData2 [20] $end
$var wire      1 [    ReadData2 [19] $end
$var wire      1 \    ReadData2 [18] $end
$var wire      1 ]    ReadData2 [17] $end
$var wire      1 ^    ReadData2 [16] $end
$var wire      1 _    ReadData2 [15] $end
$var wire      1 `    ReadData2 [14] $end
$var wire      1 a    ReadData2 [13] $end
$var wire      1 b    ReadData2 [12] $end
$var wire      1 c    ReadData2 [11] $end
$var wire      1 d    ReadData2 [10] $end
$var wire      1 e    ReadData2 [9] $end
$var wire      1 f    ReadData2 [8] $end
$var wire      1 g    ReadData2 [7] $end
$var wire      1 h    ReadData2 [6] $end
$var wire      1 i    ReadData2 [5] $end
$var wire      1 j    ReadData2 [4] $end
$var wire      1 k    ReadData2 [3] $end
$var wire      1 l    ReadData2 [2] $end
$var wire      1 m    ReadData2 [1] $end
$var wire      1 n    ReadData2 [0] $end
$var wire      1 o    OEN  $end
$var integer  32 p    error_cnt  $end
$var integer  32 q    i  $end

$scope module i_rom $end
$var wire      7 r    addr [6:0] $end
$var reg      32 s    data [31:0] $end
$var integer  32 t    i  $end
$upscope $end


$scope module i_MIPS $end
$var wire      1 u    clk  $end
$var wire      1 v    rst_n  $end
$var wire     32 $    IR [31:0] $end
$var wire     32 #    IR_addr [31:0] $end
$var wire     32 %    RF_writedata [31:0] $end
$var wire      1 &    ReadDataMem [31] $end
$var wire      1 '    ReadDataMem [30] $end
$var wire      1 (    ReadDataMem [29] $end
$var wire      1 )    ReadDataMem [28] $end
$var wire      1 *    ReadDataMem [27] $end
$var wire      1 +    ReadDataMem [26] $end
$var wire      1 ,    ReadDataMem [25] $end
$var wire      1 -    ReadDataMem [24] $end
$var wire      1 .    ReadDataMem [23] $end
$var wire      1 /    ReadDataMem [22] $end
$var wire      1 0    ReadDataMem [21] $end
$var wire      1 1    ReadDataMem [20] $end
$var wire      1 2    ReadDataMem [19] $end
$var wire      1 3    ReadDataMem [18] $end
$var wire      1 4    ReadDataMem [17] $end
$var wire      1 5    ReadDataMem [16] $end
$var wire      1 6    ReadDataMem [15] $end
$var wire      1 7    ReadDataMem [14] $end
$var wire      1 8    ReadDataMem [13] $end
$var wire      1 9    ReadDataMem [12] $end
$var wire      1 :    ReadDataMem [11] $end
$var wire      1 ;    ReadDataMem [10] $end
$var wire      1 <    ReadDataMem [9] $end
$var wire      1 =    ReadDataMem [8] $end
$var wire      1 >    ReadDataMem [7] $end
$var wire      1 ?    ReadDataMem [6] $end
$var wire      1 @    ReadDataMem [5] $end
$var wire      1 A    ReadDataMem [4] $end
$var wire      1 B    ReadDataMem [3] $end
$var wire      1 C    ReadDataMem [2] $end
$var wire      1 D    ReadDataMem [1] $end
$var wire      1 E    ReadDataMem [0] $end
$var wire      1 F    CEN  $end
$var wire      1 G    WEN  $end
$var wire      1 H    A [6] $end
$var wire      1 I    A [5] $end
$var wire      1 J    A [4] $end
$var wire      1 K    A [3] $end
$var wire      1 L    A [2] $end
$var wire      1 M    A [1] $end
$var wire      1 N    A [0] $end
$var wire      1 O    ReadData2 [31] $end
$var wire      1 P    ReadData2 [30] $end
$var wire      1 Q    ReadData2 [29] $end
$var wire      1 R    ReadData2 [28] $end
$var wire      1 S    ReadData2 [27] $end
$var wire      1 T    ReadData2 [26] $end
$var wire      1 U    ReadData2 [25] $end
$var wire      1 V    ReadData2 [24] $end
$var wire      1 W    ReadData2 [23] $end
$var wire      1 X    ReadData2 [22] $end
$var wire      1 Y    ReadData2 [21] $end
$var wire      1 Z    ReadData2 [20] $end
$var wire      1 [    ReadData2 [19] $end
$var wire      1 \    ReadData2 [18] $end
$var wire      1 ]    ReadData2 [17] $end
$var wire      1 ^    ReadData2 [16] $end
$var wire      1 _    ReadData2 [15] $end
$var wire      1 `    ReadData2 [14] $end
$var wire      1 a    ReadData2 [13] $end
$var wire      1 b    ReadData2 [12] $end
$var wire      1 c    ReadData2 [11] $end
$var wire      1 d    ReadData2 [10] $end
$var wire      1 e    ReadData2 [9] $end
$var wire      1 f    ReadData2 [8] $end
$var wire      1 g    ReadData2 [7] $end
$var wire      1 h    ReadData2 [6] $end
$var wire      1 i    ReadData2 [5] $end
$var wire      1 j    ReadData2 [4] $end
$var wire      1 k    ReadData2 [3] $end
$var wire      1 l    ReadData2 [2] $end
$var wire      1 m    ReadData2 [1] $end
$var wire      1 n    ReadData2 [0] $end
$var wire      1 o    OEN  $end
$var wire     26 w    Inst_25_0 [25:0] $end
$var wire      5 x    Inst_25_21 [4:0] $end
$var wire      5 y    Inst_20_16 [4:0] $end
$var wire      5 z    Inst_15_11 [4:0] $end
$var wire     16 {    Inst_15_0 [15:0] $end
$var wire      6 |    Inst_5_0 [5:0] $end
$var wire     32 }    pc [31:0] $end
$var wire     32 ~    PCnext [31:0] $end
$var wire      6 !!   opcode [5:0] $end
$var wire      6 "!   funct [5:0] $end
$var wire      1 #!   RegDst  $end
$var wire      1 $!   ALUSrc  $end
$var wire      1 %!   MemtoReg  $end
$var wire      1 &!   RegWrite  $end
$var wire      1 %!   MemRead  $end
$var wire      1 '!   MemWrite  $end
$var wire      1 (!   Jump  $end
$var wire      1 )!   Jump_true  $end
$var wire      2 *!   ALUOp [1:0] $end
$var wire      1 +!   Branch  $end
$var wire      1 ,!   isJAL  $end
$var wire      1 -!   isJR  $end
$var wire      1 .!   zero  $end
$var wire      4 /!   ALU_control [3:0] $end
$var wire     32 0!   ALU_Result [31:0] $end
$var wire     32 1!   ALU_data1 [31:0] $end
$var wire     32 2!   ALU_data2 [31:0] $end
$var wire      5 3!   register_rd_addr1 [4:0] $end
$var wire      5 4!   register_rd_addr2 [4:0] $end
$var wire     32 5!   register_rd_data2 [31:0] $end
$var wire      5 6!   register_wr_addr [4:0] $end
$var wire     32 7!   register_wr_data [31:0] $end
$var wire     32 8!   Add_result [31:0] $end
$var wire     32 9!   mem_alu_data_out [31:0] $end
$var wire     32 :!   pc_plus_4 [31:0] $end
$var wire     32 ;!   Inst_15_0_sign_extend [31:0] $end
$var wire     32 <!   Inst_15_0_sign_extend_shift_2 [31:0] $end
$var wire     32 =!   br_signext_sl2 [31:0] $end
$var wire     32 >!   JumpAddr [31:0] $end
$var wire      1 ?!   Mux_sel_a  $end
$var wire      5 @!   Mux_out_d [4:0] $end
$var wire     32 A!   Mux_out_a [31:0] $end
$var wire     32 B!   Mux_out_c [31:0] $end
$var wire     32 C!   Mux_out_b [31:0] $end
$var reg       5 D!   reg_31 [4:0] $end

$scope module SignExtend_0 $end
$var wire     16 {    instruction [15:0] $end
$var wire     32 ;!   instruction_out [31:0] $end
$var reg      32 E!   instruction_value [31:0] $end
$upscope $end


$scope module Alu_control_0 $end
$var wire      6 |    instruction_5_0 [5:0] $end
$var wire      2 *!   ALUOp [1:0] $end
$var wire      4 /!   Alu_control [3:0] $end
$var reg       4 F!   Alu_control_reg [3:0] $end
$upscope $end


$scope module Registers_0 $end
$var wire      1 &!   RegWrite  $end
$var wire      1 u    clk  $end
$var wire      1 v    rst_n  $end
$var wire      5 3!   read_register_1 [4:0] $end
$var wire      5 4!   read_register_2 [4:0] $end
$var wire      5 6!   write_register [4:0] $end
$var wire     32 7!   write_data [31:0] $end
$var wire     32 1!   read_data_1 [31:0] $end
$var wire     32 5!   read_data_2 [31:0] $end
$var reg      32 G!   read_data_1_reg [31:0] $end
$var reg      32 H!   read_data_2_reg [31:0] $end
$upscope $end


$scope module Alu_0 $end
$var wire     32 1!   alu_data1 [31:0] $end
$var wire     32 2!   alu_data2 [31:0] $end
$var wire      4 /!   alu_ctrl [3:0] $end
$var wire      1 .!   zero  $end
$var wire     32 0!   alu_result [31:0] $end
$var reg      32 I!   result [31:0] $end
$upscope $end


$scope module Add_4_0 $end
$var wire     32 }    add_in [31:0] $end
$var wire     32 :!   add_out [31:0] $end
$var reg      32 J!   add_value [31:0] $end
$upscope $end


$scope module Control_0 $end
$var wire      6 !!   instruction [5:0] $end
$var wire      6 |    func [5:0] $end
$var wire      1 #!   RegDst  $end
$var wire      1 (!   Jump  $end
$var wire      1 +!   Branch  $end
$var wire      1 %!   MemRead  $end
$var wire      1 %!   MemToReg  $end
$var wire      1 '!   MemWrite  $end
$var wire      1 $!   ALUSrc  $end
$var wire      1 &!   RegWrite  $end
$var wire      1 ,!   isJAL  $end
$var wire      1 -!   isJR  $end
$var wire      2 *!   ALUOp [1:0] $end
$var reg       1 K!   RegDst_reg  $end
$var reg       1 L!   Jump_reg  $end
$var reg       1 M!   Branch_reg  $end
$var reg       1 N!   MemRead_reg  $end
$var reg       1 O!   MemToReg_reg  $end
$var reg       1 P!   MemWrite_reg  $end
$var reg       1 Q!   ALUSrc_reg  $end
$var reg       1 R!   RegWrite_reg  $end
$upscope $end


$scope module Add_0 $end
$var wire     32 :!   add_in1 [31:0] $end
$var wire     32 <!   add_in2 [31:0] $end
$var wire     32 8!   add_out [31:0] $end
$var reg      32 S!   add_value [31:0] $end
$upscope $end


$scope module mux_2x1_a $end
$var wire     32 8!   ip1 [31:0] $end
$var wire     32 :!   ip0 [31:0] $end
$var wire      1 ?!   sel  $end
$var reg      32 T!   out [31:0] $end
$upscope $end


$scope module mux_2x1_b $end
$var wire     32 >!   ip1 [31:0] $end
$var wire     32 A!   ip0 [31:0] $end
$var wire      1 )!   sel  $end
$var reg      32 U!   out [31:0] $end
$upscope $end


$scope module mux_2x1_c $end
$var wire      1 &    ip1 [31] $end
$var wire      1 '    ip1 [30] $end
$var wire      1 (    ip1 [29] $end
$var wire      1 )    ip1 [28] $end
$var wire      1 *    ip1 [27] $end
$var wire      1 +    ip1 [26] $end
$var wire      1 ,    ip1 [25] $end
$var wire      1 -    ip1 [24] $end
$var wire      1 .    ip1 [23] $end
$var wire      1 /    ip1 [22] $end
$var wire      1 0    ip1 [21] $end
$var wire      1 1    ip1 [20] $end
$var wire      1 2    ip1 [19] $end
$var wire      1 3    ip1 [18] $end
$var wire      1 4    ip1 [17] $end
$var wire      1 5    ip1 [16] $end
$var wire      1 6    ip1 [15] $end
$var wire      1 7    ip1 [14] $end
$var wire      1 8    ip1 [13] $end
$var wire      1 9    ip1 [12] $end
$var wire      1 :    ip1 [11] $end
$var wire      1 ;    ip1 [10] $end
$var wire      1 <    ip1 [9] $end
$var wire      1 =    ip1 [8] $end
$var wire      1 >    ip1 [7] $end
$var wire      1 ?    ip1 [6] $end
$var wire      1 @    ip1 [5] $end
$var wire      1 A    ip1 [4] $end
$var wire      1 B    ip1 [3] $end
$var wire      1 C    ip1 [2] $end
$var wire      1 D    ip1 [1] $end
$var wire      1 E    ip1 [0] $end
$var wire     32 0!   ip0 [31:0] $end
$var wire      1 %!   sel  $end
$var reg      32 V!   out [31:0] $end
$upscope $end


$scope module mux_2x1_d $end
$var wire      5 z    ip1 [4:0] $end
$var wire      5 y    ip0 [4:0] $end
$var wire      1 #!   sel  $end
$var reg       5 W!   out [4:0] $end
$upscope $end


$scope module mux_2x1_e $end
$var wire     32 ;!   ip1 [31:0] $end
$var wire     32 5!   ip0 [31:0] $end
$var wire      1 $!   sel  $end
$var reg      32 X!   out [31:0] $end
$upscope $end


$scope module mux_2x1_f $end
$var wire     32 :!   ip1 [31:0] $end
$var wire     32 B!   ip0 [31:0] $end
$var wire      1 ,!   sel  $end
$var reg      32 Y!   out [31:0] $end
$upscope $end


$scope module mux_2x1_g $end
$var wire      5 Z!   ip1 [4:0] $end
$var wire      5 @!   ip0 [4:0] $end
$var wire      1 ,!   sel  $end
$var reg       5 [!   out [4:0] $end
$upscope $end


$scope module mux_2x1_h $end
$var wire     32 1!   ip1 [31:0] $end
$var wire     32 C!   ip0 [31:0] $end
$var wire      1 -!   sel  $end
$var reg      32 \!   out [31:0] $end
$upscope $end


$scope module PC_0 $end
$var reg      32 ]!   PC_value [31:0] $end
$var wire      1 u    clk  $end
$var wire      1 v    rst_n  $end
$var wire     32 ~    PCin [31:0] $end
$var wire     32 }    PCnext [31:0] $end
$upscope $end

$upscope $end


$scope module Data_memory $end
$var parameter 32 ^!   BITS  $end
$var parameter 32 _!   word_depth  $end
$var parameter 32 `!   addr_width  $end
$var parameter 32 a!   wordx  $end
$var parameter  7 b!   addrx  $end
$var wire      1 &    Q [31] $end
$var wire      1 '    Q [30] $end
$var wire      1 (    Q [29] $end
$var wire      1 )    Q [28] $end
$var wire      1 *    Q [27] $end
$var wire      1 +    Q [26] $end
$var wire      1 ,    Q [25] $end
$var wire      1 -    Q [24] $end
$var wire      1 .    Q [23] $end
$var wire      1 /    Q [22] $end
$var wire      1 0    Q [21] $end
$var wire      1 1    Q [20] $end
$var wire      1 2    Q [19] $end
$var wire      1 3    Q [18] $end
$var wire      1 4    Q [17] $end
$var wire      1 5    Q [16] $end
$var wire      1 6    Q [15] $end
$var wire      1 7    Q [14] $end
$var wire      1 8    Q [13] $end
$var wire      1 9    Q [12] $end
$var wire      1 :    Q [11] $end
$var wire      1 ;    Q [10] $end
$var wire      1 <    Q [9] $end
$var wire      1 =    Q [8] $end
$var wire      1 >    Q [7] $end
$var wire      1 ?    Q [6] $end
$var wire      1 @    Q [5] $end
$var wire      1 A    Q [4] $end
$var wire      1 B    Q [3] $end
$var wire      1 C    Q [2] $end
$var wire      1 D    Q [1] $end
$var wire      1 E    Q [0] $end
$var wire      1 c!   CLK  $end
$var wire      1 F    CEN  $end
$var wire      1 G    WEN  $end
$var wire      1 H    A [6] $end
$var wire      1 I    A [5] $end
$var wire      1 J    A [4] $end
$var wire      1 K    A [3] $end
$var wire      1 L    A [2] $end
$var wire      1 M    A [1] $end
$var wire      1 N    A [0] $end
$var wire      1 O    D [31] $end
$var wire      1 P    D [30] $end
$var wire      1 Q    D [29] $end
$var wire      1 R    D [28] $end
$var wire      1 S    D [27] $end
$var wire      1 T    D [26] $end
$var wire      1 U    D [25] $end
$var wire      1 V    D [24] $end
$var wire      1 W    D [23] $end
$var wire      1 X    D [22] $end
$var wire      1 Y    D [21] $end
$var wire      1 Z    D [20] $end
$var wire      1 [    D [19] $end
$var wire      1 \    D [18] $end
$var wire      1 ]    D [17] $end
$var wire      1 ^    D [16] $end
$var wire      1 _    D [15] $end
$var wire      1 `    D [14] $end
$var wire      1 a    D [13] $end
$var wire      1 b    D [12] $end
$var wire      1 c    D [11] $end
$var wire      1 d    D [10] $end
$var wire      1 e    D [9] $end
$var wire      1 f    D [8] $end
$var wire      1 g    D [7] $end
$var wire      1 h    D [6] $end
$var wire      1 i    D [5] $end
$var wire      1 j    D [4] $end
$var wire      1 k    D [3] $end
$var wire      1 l    D [2] $end
$var wire      1 m    D [1] $end
$var wire      1 n    D [0] $end
$var wire      1 o    OEN  $end
$var reg       1 d!   NOT_CEN  $end
$var reg       1 e!   NOT_WEN  $end
$var reg       1 f!   NOT_A0  $end
$var reg       1 g!   NOT_A1  $end
$var reg       1 h!   NOT_A2  $end
$var reg       1 i!   NOT_A3  $end
$var reg       1 j!   NOT_A4  $end
$var reg       1 k!   NOT_A5  $end
$var reg       1 l!   NOT_A6  $end
$var reg       7 m!   NOT_A [6:0] $end
$var reg       1 n!   NOT_D0  $end
$var reg       1 o!   NOT_D1  $end
$var reg       1 p!   NOT_D2  $end
$var reg       1 q!   NOT_D3  $end
$var reg       1 r!   NOT_D4  $end
$var reg       1 s!   NOT_D5  $end
$var reg       1 t!   NOT_D6  $end
$var reg       1 u!   NOT_D7  $end
$var reg       1 v!   NOT_D8  $end
$var reg       1 w!   NOT_D9  $end
$var reg       1 x!   NOT_D10  $end
$var reg       1 y!   NOT_D11  $end
$var reg       1 z!   NOT_D12  $end
$var reg       1 {!   NOT_D13  $end
$var reg       1 |!   NOT_D14  $end
$var reg       1 }!   NOT_D15  $end
$var reg       1 ~!   NOT_D16  $end
$var reg       1 !"   NOT_D17  $end
$var reg       1 ""   NOT_D18  $end
$var reg       1 #"   NOT_D19  $end
$var reg       1 $"   NOT_D20  $end
$var reg       1 %"   NOT_D21  $end
$var reg       1 &"   NOT_D22  $end
$var reg       1 '"   NOT_D23  $end
$var reg       1 ("   NOT_D24  $end
$var reg       1 )"   NOT_D25  $end
$var reg       1 *"   NOT_D26  $end
$var reg       1 +"   NOT_D27  $end
$var reg       1 ,"   NOT_D28  $end
$var reg       1 -"   NOT_D29  $end
$var reg       1 ."   NOT_D30  $end
$var reg       1 /"   NOT_D31  $end
$var reg      32 0"   NOT_D [31:0] $end
$var reg       1 1"   NOT_CLK_PER  $end
$var reg       1 2"   NOT_CLK_MINH  $end
$var reg       1 3"   NOT_CLK_MINL  $end
$var reg       1 4"   LAST_NOT_CEN  $end
$var reg       1 5"   LAST_NOT_WEN  $end
$var reg       7 6"   LAST_NOT_A [6:0] $end
$var reg      32 7"   LAST_NOT_D [31:0] $end
$var reg       1 8"   LAST_NOT_CLK_PER  $end
$var reg       1 9"   LAST_NOT_CLK_MINH  $end
$var reg       1 :"   LAST_NOT_CLK_MINL  $end
$var wire      1 ;"   _Q [31] $end
$var wire      1 <"   _Q [30] $end
$var wire      1 ="   _Q [29] $end
$var wire      1 >"   _Q [28] $end
$var wire      1 ?"   _Q [27] $end
$var wire      1 @"   _Q [26] $end
$var wire      1 A"   _Q [25] $end
$var wire      1 B"   _Q [24] $end
$var wire      1 C"   _Q [23] $end
$var wire      1 D"   _Q [22] $end
$var wire      1 E"   _Q [21] $end
$var wire      1 F"   _Q [20] $end
$var wire      1 G"   _Q [19] $end
$var wire      1 H"   _Q [18] $end
$var wire      1 I"   _Q [17] $end
$var wire      1 J"   _Q [16] $end
$var wire      1 K"   _Q [15] $end
$var wire      1 L"   _Q [14] $end
$var wire      1 M"   _Q [13] $end
$var wire      1 N"   _Q [12] $end
$var wire      1 O"   _Q [11] $end
$var wire      1 P"   _Q [10] $end
$var wire      1 Q"   _Q [9] $end
$var wire      1 R"   _Q [8] $end
$var wire      1 S"   _Q [7] $end
$var wire      1 T"   _Q [6] $end
$var wire      1 U"   _Q [5] $end
$var wire      1 V"   _Q [4] $end
$var wire      1 W"   _Q [3] $end
$var wire      1 X"   _Q [2] $end
$var wire      1 Y"   _Q [1] $end
$var wire      1 Z"   _Q [0] $end
$var wire      1 ["   _OENi  $end
$var wire      7 \"   _A [6:0] $end
$var wire      1 ]"   _CLK  $end
$var wire      1 ^"   _CEN  $end
$var wire      1 _"   _OEN  $end
$var wire      1 `"   _WEN  $end
$var wire     32 a"   _D [31:0] $end
$var wire      1 b"   re_flag  $end
$var wire      1 c"   re_data_flag  $end
$var reg       1 d"   LATCHED_CEN  $end
$var reg       1 e"   LATCHED_WEN  $end
$var reg       7 f"   LATCHED_A [6:0] $end
$var reg      32 g"   LATCHED_D [31:0] $end
$var reg       1 h"   CENi  $end
$var reg       1 i"   WENi  $end
$var reg       7 j"   Ai [6:0] $end
$var reg      32 k"   Di [31:0] $end
$var reg      32 l"   Qi [31:0] $end
$var reg      32 m"   LAST_Qi [31:0] $end
$var reg       1 n"   LAST_CLK  $end

$scope task x_inputs $end
$var integer  32 o"   n  $end
$upscope $end


$scope task read_mem $end
$var reg       1 p"   r_wb  $end
$var reg       1 q"   xflag  $end
$upscope $end


$scope task write_mem $end
$var reg       7 r"   a [6:0] $end
$var reg      32 s"   d [31:0] $end
$upscope $end


$scope task write_mem_x $end
$var reg       7 t"   a [6:0] $end
$upscope $end


$scope task x_mem $end
$var integer  32 u"   n  $end
$upscope $end


$scope function valid_address $end
$var reg       1 v"   valid_address  $end
$var reg       7 w"   a [6:0] $end
$upscope $end

$upscope $end

$upscope $end

$enddefinitions $end
$dumpvars
bx b!
bx a!
b111 `!
b10000000 _!
b100000 ^!
0!
1"
bx #
bx $
bx %
x&
x'
x(
x)
x*
x+
x,
x-
x.
x/
x0
x1
x2
x3
x4
x5
x6
x7
x8
x9
x:
x;
x<
x=
x>
x?
x@
xA
xB
xC
xD
xE
xF
xG
xH
xI
xJ
xK
xL
xM
xN
xO
xP
xQ
xR
xS
xT
xU
xV
xW
xX
xY
xZ
x[
x\
x]
x^
x_
x`
xa
xb
xc
xd
xe
xf
xg
xh
xi
xj
xk
xl
xm
xn
0o
b0 p
bx q
bx r
bx s
bx t
0u
1v
bx w
bx x
bx y
bx z
bx {
bx |
bx }
bx ~
bx !!
bz "!
x#!
x$!
x%!
x&!
x'!
x(!
x)!
bx *!
x+!
x,!
x-!
x.!
bx /!
bx 0!
bx 1!
bx 2!
bx 3!
bx 4!
bx 5!
bx 6!
bx 7!
bx 8!
bz 9!
bx :!
bx ;!
bx00 <!
bz =!
bx00 >!
x?!
bx @!
bx A!
bx B!
bx C!
b11111 D!
bx E!
bx F!
bx G!
bx H!
bx I!
bx J!
xK!
xL!
xM!
xN!
xO!
xP!
xQ!
xR!
bx S!
bx T!
bx U!
bx V!
bx W!
bx X!
bx Y!
b11111 Z!
bx [!
bx \!
bx ]!
1c!
xd!
xe!
xf!
xg!
xh!
xi!
xj!
xk!
xl!
bx m!
xn!
xo!
xp!
xq!
xr!
xs!
xt!
xu!
xv!
xw!
xx!
xy!
xz!
x{!
x|!
x}!
x~!
x!"
x""
x#"
x$"
x%"
x&"
x'"
x("
x)"
x*"
x+"
x,"
x-"
x."
x/"
bx 0"
x1"
x2"
x3"
x4"
x5"
bx 6"
bx 7"
x8"
x9"
x:"
x;"
x<"
x="
x>"
x?"
x@"
xA"
xB"
xC"
xD"
xE"
xF"
xG"
xH"
xI"
xJ"
xK"
xL"
xM"
xN"
xO"
xP"
xQ"
xR"
xS"
xT"
xU"
xV"
xW"
xX"
xY"
xZ"
0["
bx \"
1]"
x^"
0_"
x`"
bx a"
xb"
xc"
xd"
xe"
bx f"
bx g"
xh"
xi"
bx j"
bx k"
bx l"
bx m"
1n"
bx o"
xp"
xq"
bx r"
bx s"
bx t"
bx u"
xv"
bx w"
$end
#200
0"
0v
b0 ]!
b0 G!
b0 H!
b0 }
b100 J!
b0 #
b100 :!
b100 T!
b100 A!
b0 r
b100 U!
b10001100000010000000000000000000 s
b10001100000010000000000000000000 $
b100 C!
b100 \!
b100 ~
b0 {
b0 z
b1000 y
b0 x
b10000000000000000000 w
b0 |
b100011 !!
b0 E!
b1000 W!
b10 F!
0F
0,!
1$!
0'!
1%!
0+!
0(!
0#!
b0 *!
b10 /!
0-!
1&!
b0 3!
b1000 4!
b1000 @!
b0 ;!
0?!
1G
0^"
1b"
1`"
0c"
b1000 [!
b0 X!
b0 <!
b0 5!
b0 1!
0.!
0)!
b0 2!
b1000 6!
b100 S!
b0 I!
b0 0!
0O
0P
0Q
0R
0S
0T
0U
0V
0W
0X
0Y
0Z
0[
0\
0]
0^
0_
0`
0a
0b
0c
0d
0e
0f
0g
0h
0i
0j
0k
0l
0m
0n
b0 >!
b100 8!
b0 a"
0H
0I
0J
0K
0L
0M
0N
b0 \"
#500
1!
0c!
1u
0]"
0n"
#1000
0!
1c!
0u
1]"
b0 f"
b0 g"
1e"
0d"
0h"
1i"
b0 j"
b0 k"
1p"
0q"
b0 w"
1v"
b1111 l"
1n"
0;"
0<"
0="
0>"
0?"
0@"
0A"
0B"
0C"
0D"
0E"
0F"
0G"
0H"
0I"
0J"
0K"
0L"
0M"
0N"
0O"
0P"
0Q"
0R"
0S"
0T"
0U"
0V"
1W"
1X"
1Y"
1Z"
#1100
1E
1D
1C
1B
0A
0@
0?
0>
0=
0<
0;
0:
09
08
07
06
05
04
03
02
01
00
0/
0.
0-
0,
0+
0*
0)
0(
0'
0&
b1111 V!
b1111 B!
b1111 Y!
b1111 7!
b1111 %
#1500
1!
0c!
1u
0]"
0n"
#1700
1"
1v
#2000
0!
1c!
0u
1]"
b1111 m"
1n"
#2500
1!
0c!
1u
0]"
0n"
b100 ]!
b1111 5!
b100 }
b1000 J!
b100 #
b1000 :!
1k
1l
1m
1n
b1000 T!
b1000 S!
b1111 a"
b1000 8!
b1000 A!
b1 r
b1000 U!
b10001100000010010000000000000100 s
b10001100000010010000000000000100 $
b1000 C!
b1000 \!
b1000 ~
b100 {
b1001 y
b10010000000000000100 w
b100 |
b100 E!
b1001 W!
b1001 4!
b1001 @!
b100 ;!
b1001 [!
b100 X!
b10000 <!
b100 2!
b1001 6!
b0 5!
b11000 S!
b100 I!
0k
0l
0m
0n
b100 0!
b10000 >!
b11000 8!
1N
b0 a"
b1 \"
#3000
0!
1c!
0u
1]"
b1 f"
b1 j"
b1 w"
b10100 l"
1n"
1V"
0W"
0Y"
0Z"
#3100
0E
0D
0B
1A
b10100 V!
b10100 B!
b10100 Y!
b10100 7!
b10100 %
#3500
1!
0c!
1u
0]"
0n"
b1000 ]!
b10100 5!
b1000 }
b1100 J!
b1000 #
b1100 :!
1j
1l
b1100 T!
b11100 S!
b10100 a"
b11100 8!
b1100 A!
b10 r
b1100 U!
b1000010000100000000100000 s
b1000010000100000000100000 $
b1100 C!
b1100 \!
b1100 ~
b100000000100000 {
b1000 z
b1000 y
b1000 x
b1000010000100000000100000 w
b100000 |
b0 !!
b100000000100000 E!
b1000 W!
1F
0$!
0%!
1#!
b10 *!
b1000 3!
b1000 4!
b1000 @!
b100000000100000 ;!
1^"
0b"
b10100 X!
b100 V!
b1000 [!
b10000000010000000 <!
b1000 6!
b1111 5!
b1111 1!
b100 B!
b10100 2!
b10000000010001100 S!
b1111 X!
b100011 I!
b100 Y!
b100 7!
b100011 0!
0j
1k
1m
1n
b1111 2!
b10000000010000000 >!
b10000000010001100 8!
b100011 V!
b11110 I!
b11110 0!
b1111 a"
1K
0N
b100011 B!
b100 %
b11110 V!
b100011 Y!
b100011 7!
b1000 \"
0K
1L
1M
1N
b11110 B!
b11110 Y!
b11110 7!
b111 \"
b100011 %
b11110 %
#4000
0!
1c!
0u
1]"
b111 f"
b1111 g"
1d"
b10100 m"
1h"
b111 j"
b1111 k"
1n"
#4500
1!
0c!
1u
0]"
0n"
b1100 ]!
b11110 5!
b11110 1!
b1100 }
b11110 X!
b101101 I!
b10000 J!
b1100 #
b10000 :!
b101101 0!
1j
0n
b11110 2!
b10000 T!
b10000000010010000 S!
b101101 V!
b111100 I!
b111100 0!
b11110 a"
1K
0L
b101101 B!
b10000000010010000 8!
b10000 A!
b11 r
b111100 V!
b101101 Y!
b10000 U!
b1000010010101000000100010 s
b1000010010101000000100010 $
b10000 C!
b101101 7!
b1011 \"
1L
b111100 B!
b10000 \!
b111100 Y!
b111100 7!
b1111 \"
b101101 %
b10000 ~
b101000000100010 {
b1010 z
b1001 y
b1000010010101000000100010 w
b100010 |
b101000000100010 E!
b1010 W!
b110 F!
b110 /!
b1001 4!
b1010 @!
b101000000100010 ;!
b111100 %
b0 I!
b1010 [!
1.!
b10100000010001000 <!
b1010 6!
b10100 5!
b0 0!
b10100000010011000 S!
b10100 X!
b0 V!
0K
0L
0M
0N
b0 B!
0k
0m
b10100 2!
b10100000010001000 >!
b10100000010011000 8!
b0 Y!
b1010 I!
0.!
b1010 0!
b10100 a"
b0 7!
b0 \"
b1010 V!
b0 %
1M
b1010 B!
b1010 Y!
b1010 7!
b10 \"
b1010 %
#5000
0!
1c!
0u
1]"
b10 f"
b10100 g"
b10 j"
b10100 k"
1n"
#5500
1!
0c!
1u
0]"
0n"
b10000 ]!
b10000 }
b10100 J!
b10000 #
b10100 :!
b10100 T!
b10100000010011100 S!
b10100000010011100 8!
b10100 A!
b100 r
b10100 U!
b1000010010101100000100100 s
b1000010010101100000100100 $
b10100 C!
b10100 \!
b10100 ~
b101100000100100 {
b1011 z
b1000010010101100000100100 w
b100100 |
b101100000100100 E!
b1011 W!
b0 F!
b0 /!
b1011 @!
b101100000100100 ;!
b10100 I!
b1011 [!
b10110000010010000 <!
b1011 6!
b10100 0!
b10110000010100100 S!
b10100 V!
1L
0M
1N
b10100 B!
b10110000010010000 >!
b10110000010100100 8!
b10100 Y!
b10100 7!
b101 \"
b10100 %
#6000
0!
1c!
0u
1]"
b101 f"
b101 j"
1n"
#6500
1!
0c!
1u
0]"
0n"
b10100 ]!
b10100 }
b11000 J!
b10100 #
b11000 :!
b11000 T!
b10110000010101000 S!
b10110000010101000 8!
b11000 A!
b101 r
b11000 U!
b10001000010100000000000001100 s
b10001000010100000000000001100 $
b11000 C!
b11000 \!
b11000 ~
b1100 {
b0 z
b1010 y
b1000010100000000000001100 w
b1100 |
b100 !!
b1100 E!
b0 W!
b10 F!
0F
1+!
0#!
b1 *!
b10 /!
0&!
b1010 4!
b0 @!
b1100 ;!
0^"
1b"
b1010 W!
b110 F!
b110010 I!
b0 [!
b110000 <!
b0 6!
b1010 5!
b110010 0!
b110 /!
b1010 @!
b1001000 S!
b1010 X!
b110010 V!
b1010 I!
b1010 [!
b1010 6!
b1010 0!
1K
0N
b110010 B!
0j
1k
0l
1m
b1010 2!
b110000 >!
b1001000 8!
b1010 V!
b110010 Y!
b10100 I!
b10100 0!
b1010 a"
b110010 7!
b1100 \"
0K
0L
1M
b1010 B!
b10100 V!
b1010 Y!
b1010 7!
b10 \"
b110010 %
1L
0M
1N
b10100 B!
b10100 Y!
b10100 7!
b101 \"
b1010 %
b10100 %
#7000
0!
1c!
0u
1]"
b1010 g"
0d"
0h"
b1010 k"
b101 w"
b0 l"
1n"
0V"
0X"
#7100
0C
0A
#7500
1!
0c!
1u
0]"
0n"
b11000 ]!
b11000 }
b11100 J!
b11000 #
b11100 :!
b11100 T!
b1001100 S!
b1001100 8!
b11100 A!
b110 r
b11100 U!
b1000010010110000000100101 s
b1000010010110000000100101 $
b11100 C!
b11100 \!
b11100 ~
b110000000100101 {
b1100 z
b1001 y
b1000010010110000000100101 w
b100101 |
b0 !!
b110000000100101 E!
b1001 W!
1F
0+!
1#!
b10 *!
1&!
b1001 4!
b1001 @!
b110000000100101 ;!
1^"
0b"
b1100 W!
b1 F!
b1001 [!
b11000000010010100 <!
b1001 6!
b10100 5!
b1 /!
b1100 @!
b11000000010110000 S!
b10100 X!
b11110 I!
b1100 [!
b1100 6!
b11110 0!
1j
0k
1l
0m
b10100 2!
b11000000010010100 >!
b11000000010110000 8!
b11110 V!
b10100 a"
1M
b11110 B!
b11110 Y!
b11110 7!
b111 \"
b11110 %
#8000
0!
1c!
0u
1]"
b111 f"
b10100 g"
1d"
b0 m"
1h"
b111 j"
b10100 k"
1n"
#8500
1!
0c!
1u
0]"
0n"
b11100 ]!
b11100 }
b100000 J!
b11100 #
b100000 :!
b100000 T!
b11000000010110100 S!
b11000000010110100 8!
b100000 A!
b111 r
b100000 U!
b1011011000110100000101010 s
b1011011000110100000101010 $
b100000 C!
b100000 \!
b100000 ~
b110100000101010 {
b1101 z
b1100 y
b1011 x
b1011011000110100000101010 w
b101010 |
b110100000101010 E!
b1101 W!
b111 F!
b111 /!
b1011 3!
b1100 4!
b1101 @!
b110100000101010 ;!
b0 I!
b1101 [!
b11010000010101000 <!
b1101 6!
b11110 5!
b10100 1!
b0 0!
b11010000011001000 S!
b11110 X!
b0 V!
0L
0M
0N
b0 B!
1k
1m
b11110 2!
b11010000010101000 >!
b11010000011001000 8!
b0 Y!
b1 I!
b1 0!
b11110 a"
b0 7!
b0 \"
b1 V!
b0 %
b1 B!
b1 Y!
b1 7!
b1 %
#9000
0!
1c!
0u
1]"
b0 f"
b11110 g"
b0 j"
b11110 k"
1n"
#9500
1!
0c!
1u
0]"
0n"
b100000 ]!
b100000 }
b100100 J!
b100000 #
b100100 :!
b100100 T!
b11010000011001100 S!
b11010000011001100 8!
b100100 A!
b1000 r
b100100 U!
b10101100000011000000000000000100 s
b10101100000011000000000000000100 $
b100100 C!
b100100 \!
b100100 ~
b100 {
b0 z
b0 x
b11000000000000000100 w
b100 |
b101011 !!
b100 E!
b0 W!
b10 F!
0F
1$!
1'!
0#!
b0 *!
b10 /!
0&!
b0 3!
b0 @!
b100 ;!
0G
0^"
1b"
0`"
1c"
b100 X!
b1100 W!
b110010 I!
b0 [!
b10000 <!
b0 6!
b0 1!
b110010 0!
b1100 @!
b100 2!
b110100 S!
b100 I!
b110010 V!
b1100 [!
b1100 6!
1K
1L
b110010 B!
b100 0!
b10000 >!
b110100 8!
b110010 Y!
b100 V!
0K
0L
1N
b100 B!
b110010 7!
b1100 \"
b100 Y!
b110010 %
b100 7!
b1 \"
b100 %
#10000
0!
1c!
0u
1]"
b1 f"
0e"
0d"
0h"
0i"
b1 j"
b1 r"
b11110 s"
b1 w"
0p"
b11110 l"
1n"
1V"
1W"
1X"
1Y"
#10100
1D
1C
1B
1A
#10500
1!
0c!
1u
0]"
0n"
b100100 ]!
b100100 }
b101000 J!
b100100 #
b101000 :!
b101000 T!
b111000 S!
b111000 8!
b101000 A!
b1001 r
b101000 U!
b10001100000100010000000000000100 s
b10001100000100010000000000000100 $
b101000 C!
b101000 \!
b101000 ~
b10001 y
b100010000000000000100 w
b100011 !!
b10001 W!
0'!
1%!
1&!
b10001 4!
b10001 @!
1G
1`"
0c"
b11110 V!
b10001 [!
b10001 6!
b0 5!
b11110 B!
b11110 Y!
b11110 7!
0j
0k
0l
0m
b0 a"
b11110 %
#11000
0!
1c!
0u
1]"
b0 g"
1e"
b11110 m"
1i"
b0 k"
1p"
1n"
#11500
1!
0c!
1u
0]"
0n"
b101000 ]!
b11110 5!
b101000 }
b101100 J!
b101000 #
b101100 :!
1j
1k
1l
1m
b101100 T!
b111100 S!
b11110 a"
b111100 8!
b101100 A!
b1010 r
b101100 U!
b1000000000000000000000001101 s
b1000000000000000000000001101 $
b101100 C!
b101100 \!
b101100 ~
b1101 {
b0 y
b1101 w
b1101 |
b10 !!
b1101 E!
b0 W!
0%!
1(!
0&!
b0 4!
b0 @!
b1101 ;!
b100 V!
b0 [!
b1101 X!
b110100 <!
b1101 2!
b0 6!
b0 5!
1)!
b100 B!
b1100000 S!
b1101 I!
b10000 U!
b100 Y!
b100 7!
b10000 C!
0j
0k
0l
0m
b1101 0!
b110100 >!
b1100000 8!
b10000 \!
b1101 V!
b110100 U!
b110100 C!
1M
b1101 B!
b0 a"
b10000 ~
b100 %
b110100 \!
b1101 Y!
b1101 7!
b11 \"
b110100 ~
b1101 %
#12000
0!
1c!
0u
1]"
b11 f"
b11 j"
b11 w"
b0 l"
1n"
0V"
0W"
0X"
0Y"
#12100
0D
0C
0B
0A
#12500
1!
0c!
1u
0]"
0n"
b110100 ]!
b110100 }
b111000 J!
b110100 #
b111000 :!
b111000 T!
b1101100 S!
b1101100 8!
b111000 A!
b1101 r
b1011010111001100000100000 s
b1011010111001100000100000 $
b1001100000100000 {
b10011 z
b1011 y
b1011 x
b1011010111001100000100000 w
b100000 |
b0 !!
b11111111111111111001100000100000 E!
b1011 W!
1F
0$!
0(!
1#!
b10 *!
1&!
b1011 3!
b1011 4!
b1011 @!
b11111111111111111001100000100000 ;!
1^"
0b"
b0 X!
b10011 W!
b1011 [!
b11111111111111100110000010000000 <!
b1011 6!
b10100 5!
b10100 1!
b10011 @!
0)!
b0 2!
b11111111111111100110000010111000 S!
b10100 X!
b10100 I!
b10011 [!
b111000 U!
b111000 C!
b10011 6!
b10100 0!
1j
1l
b10100 2!
b11111111111111100110000010000000 >!
b11111111111111100110000010111000 8!
b111000 \!
b10100 V!
b101000 I!
b101000 0!
b10100 a"
1L
0M
b10100 B!
b111000 ~
b101000 V!
b10100 Y!
b10100 7!
b101 \"
1K
0L
1M
0N
b101000 B!
b101000 Y!
b101000 7!
b1010 \"
b10100 %
b101000 %
#13000
0!
1c!
0u
1]"
b1010 f"
b10100 g"
1d"
b0 m"
1h"
b1010 j"
b10100 k"
1n"
#13500
1!
0c!
1u
0]"
0n"
b111000 ]!
b111000 }
b111100 J!
b111000 #
b111100 :!
b111100 T!
b11111111111111100110000010111100 S!
b11111111111111100110000010111100 8!
b111100 A!
b1110 r
b111100 U!
b1100000000000000000000001011 s
b1100000000000000000000001011 $
b111100 C!
b111100 \!
b111100 ~
b1011 {
b0 z
b0 y
b0 x
b1011 w
b1011 |
b11 !!
b1011 E!
b0 W!
0F
1,!
1$!
1(!
0#!
b0 *!
b0 3!
b0 4!
b0 @!
b1011 ;!
0^"
1b"
b11111 [!
b111100 Y!
b1011 X!
b101100 <!
b0 5!
b0 1!
1)!
b1011 2!
b111100 7!
b11111 6!
b1101000 S!
b1011 I!
b11111111111111100110000010000000 U!
b111100 %
b11111111111111100110000010000000 C!
b1011 0!
0j
0l
b101100 >!
b1101000 8!
b11111111111111100110000010000000 \!
b1011 V!
b101100 U!
b101100 C!
b0 a"
0K
b1011 B!
b11111111111111100110000010000000 ~
b101100 \!
b10 \"
b101100 ~
#14000
0!
1c!
0u
1]"
b10 f"
b0 g"
0d"
0h"
b10 j"
b0 k"
b10 w"
1n"
#14500
1!
0c!
1u
0]"
0n"
b101100 ]!
b101100 }
b110000 J!
b101100 #
b110000 :!
b110000 Y!
b110000 T!
b1011100 S!
b1011100 8!
b110000 A!
b110000 7!
b1011 r
b1011010111001000000100000 s
b1011010111001000000100000 $
b110000 %
b1001000000100000 {
b10010 z
b1011 y
b1011 x
b1011010111001000000100000 w
b100000 |
b0 !!
b11111111111111111001000000100000 E!
b1011 W!
1F
0,!
0$!
0(!
1#!
b10 *!
b1011 3!
b1011 4!
b1011 @!
b11111111111111111001000000100000 ;!
1^"
0b"
b1011 [!
b1011 Y!
b0 X!
b10010 W!
b11111111111111100100000010000000 <!
b10100 5!
b10100 1!
b10010 @!
0)!
b0 2!
b1011 7!
b1011 6!
b11111111111111100100000010110000 S!
b10100 X!
b10100 I!
b10010 [!
b110000 U!
b1011 %
b110000 C!
b10010 6!
b10100 0!
1j
1l
b10100 2!
b11111111111111100100000010000000 >!
b11111111111111100100000010110000 8!
b110000 \!
b10100 V!
b101000 I!
b101000 0!
b10100 a"
1L
0M
1N
b10100 B!
b110000 ~
b101000 V!
b10100 Y!
b10100 7!
b101 \"
1K
0L
1M
0N
b101000 B!
b101000 Y!
b101000 7!
b1010 \"
b10100 %
b101000 %
#15000
0!
1c!
0u
1]"
b1010 f"
b10100 g"
1d"
1h"
b1010 j"
b10100 k"
1n"
#15500
1!
0c!
1u
0]"
0n"
b110000 ]!
b110000 }
b110100 J!
b110000 #
b110100 :!
b110100 T!
b11111111111111100100000010110100 S!
b11111111111111100100000010110100 8!
b110100 A!
b1100 r
b110100 U!
b11111000000000000000001000 s
b11111000000000000000001000 $
b110100 C!
b110100 \!
b110100 ~
b1000 {
b0 z
b0 y
b11111 x
b11111000000000000000001000 w
b1000 |
b1000 E!
b0 W!
1-!
0&!
b11111 3!
b0 4!
b0 @!
b1000 ;!
b10100 \!
b0 [!
b100000 <!
b0 6!
b0 5!
b111100 1!
b10100 ~
b1010100 S!
b0 X!
b111100 \!
b1010000 I!
b1010000 0!
b111100 ~
0j
0l
b0 2!
b100000 >!
b1010100 8!
b1010000 V!
b111100 I!
b111100 0!
b0 a"
1J
0K
1L
0M
b1010000 B!
b111100 V!
b1010000 Y!
b1010000 7!
b10100 \"
0J
1K
1M
1N
b111100 B!
b111100 Y!
b111100 7!
b1111 \"
b1010000 %
b111100 %
#16000
0!
1c!
0u
1]"
b1111 f"
b0 g"
b1111 j"
b0 k"
1n"
#16500
1!
0c!
1u
0]"
0n"
b111100 ]!
b111100 }
b1000000 J!
b111100 #
b1000000 :!
b1000000 T!
b1100000 S!
b1100000 8!
b1000000 A!
b1111 r
b1000000 U!
b10010010100110000000000000010 s
b10010010100110000000000000010 $
b1000000 C!
b10 {
b10011 y
b10010 x
b10010100110000000000000010 w
b10 |
b100 !!
b10 E!
0F
1+!
0#!
b1 *!
0-!
b10010 3!
b10011 4!
b10 ;!
0^"
1b"
b10011 W!
b110 F!
b1000000 \!
b1000 <!
b101000 5!
b101000 1!
b1000000 ~
b110 /!
b10011 @!
b1001000 S!
b101000 X!
b101000 I!
b10011 [!
b10011 6!
b101000 0!
1i
1k
b101000 2!
b1000 >!
b1001000 8!
b101000 V!
b0 I!
1.!
b0 0!
b101000 a"
0L
0N
b101000 B!
1?!
b0 V!
b101000 Y!
b1001000 T!
b1001000 A!
b101000 7!
b1010 \"
0K
0M
b0 B!
b1001000 U!
b0 Y!
b0 7!
b0 \"
b101000 %
b1001000 C!
b1001000 \!
b1001000 ~
b0 %
#17000
0!
1c!
0u
1]"
b0 f"
b101000 g"
0d"
0h"
b0 j"
b101000 k"
b0 w"
b1111 l"
1n"
1W"
1X"
1Y"
1Z"
#17100
1E
1D
1C
1B
#17500
1!
0c!
1u
0]"
0n"
b1001000 ]!
b1001000 }
b1001100 J!
b1001000 #
b1001100 :!
b1010100 S!
b1010100 8!
b10010 r
b1010100 T!
b10011100101010000000100000 s
b10011100101010000000100000 $
b1010100 A!
b1010100 U!
b1010100 C!
b1010000000100000 {
b10100 z
b10010 y
b10011 x
b10011100101010000000100000 w
b100000 |
b0 !!
b1010100 \!
b11111111111111111010000000100000 E!
b10010 W!
1F
0+!
1#!
b10 *!
1&!
b10011 3!
b10010 4!
b10010 @!
b11111111111111111010000000100000 ;!
b1010100 ~
0?!
1^"
0b"
b10100 W!
b10 F!
b10010 [!
b1001100 T!
b1001100 A!
b11111111111111101000000010000000 <!
b10010 6!
b10 /!
b10100 @!
b1001100 U!
b11111111111111101000000011001100 S!
b1010000 I!
b10100 [!
b10100 6!
b1010000 0!
0.!
b11111111111111101000000010000000 >!
b11111111111111101000000011001100 8!
b1001100 C!
b1010000 V!
b1001100 \!
b1001100 ~
1J
1L
b1010000 B!
b1010000 Y!
b1010000 7!
b10100 \"
b1010000 %
#18000
0!
1c!
0u
1]"
b10100 f"
1d"
b1111 m"
1h"
b10100 j"
1n"
#18500
